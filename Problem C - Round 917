#include <bits/stdc++.h>
using namespace std;

#define sr srand(time(0));
#define ra(l, h) (rand() % ((h)-(l)+1) + (l))
#define sync { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); }
#define ll long long int
#define vi vector<int>
#define fn(n) for(int i = 0; i < n; i++)
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define rfr(i, a, b) for(int i = a; i >= b; i--)
#define pb push_back
#define all(a) a.begin(), a.end()
#define tt int test; cin >> test; while(test--)
#define ff first
#define ss second
#define en cout<< "\n"
#define cy cout << "YES" << endl
#define cn cout << "NO" << endl



int main() {
    sync
    tt {
        int n, k, d;
        cin >> n >> k >> d;
        
        vi a(n);
        fn(n) cin>>a[i];
        
        vi v(k);
        fn(k) cin>>v[i];
        
        
        int score = 0;
        for(int j=0; j<d && j<=2*n; j++){
			int count=0;
			fn(n) {
				if(a[i] == (i+1))	count++;
			}
			count += (d-j-1)/2;
			
			if(count>score)	score=count;
			
			for(int i=0; i<v[j%k]; i++)	a[i]++;
		}
        
        cout<<score<<"\n";
        
        
    }
    return 0;
}



/*

    obervations:
    after a[i] = 0 0 0 0 0 0 0
    there is only one secondOperations to get a[i] = i+1
    so after that we do secondOperations and then again firstOperations and increase our Score by one
    and make our array 0 0 0 0 0 0 0 
    then we repeat that
    so we need to find when do we first apply secondOperations
    and we need to do only 2n operations because after 2n operations all a[i] became greater than n 
    which will never be equal to i+1 
    
*/



